<?php
//$this->headLink()->appendStylesheet('/assets/data-tables/DT_bootstrap.css');

$this->headScript()
    ->appendFile('http://maps.google.com/maps/api/js?sensor=false')
    ->appendFile('/assets/google/maps/v3_epoly.js')
    //->appendFile('/assets/google/maps/markerwithlabel.js')
;
$this->inlineScript()->captureStart();
echo <<<JS
var map;
var directionDisplay;
var directionsService;
var stepDisplay;
var markerArray = [];
var position;
var marker = null;
var polyline = null;
var poly2 = null;
var speed = 0.000005, wait = 1;
var infowindow = null;
  
var myPano;   
var panoClient;
var nextPanoId;
var timerHandle = null;

function createMarker(latlng, label, html) {
 console.log("createMarker("+latlng+","+label+","+html+")");
    var contentString = '<b>'+label+'</b><br>'+html;
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
        title: label,
        zIndex: Math.round(latlng.lat()*-100000)<<5
        });
        marker.myname = label;
        // gmarkers.push(marker);

    google.maps.event.addListener(marker, 'click', function() {
        infowindow.setContent(contentString); 
        infowindow.open(map,marker);
        });
    return marker;
}

var CenterLatLng = new google.maps.LatLng(51.505003, -0.019966);
var StartLatLng = new google.maps.LatLng(51.504374, -0.017218);
var EndLatLng = new google.maps.LatLng(51.504363, -0.017176);

// Define the LatLng coordinates for the polygon's path.
var tunnelCoords = [
      new google.maps.LatLng(51.505597, -0.022218),
      new google.maps.LatLng(51.505308, -0.019431),
      new google.maps.LatLng(51.505262, -0.019445),
      new google.maps.LatLng(51.505557, -0.022229),
      new google.maps.LatLng(51.505597, -0.022218)
    ];

    // Construct the polygon.
var tunnelShape = new google.maps.Polygon({
      paths: tunnelCoords,
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#FF0000',
      fillOpacity: 0.35
    });

function initialize() {
    infowindow = new google.maps.InfoWindow(
    { 
      size: new google.maps.Size(150,50)
    });
    // Instantiate a directions service.
    directionsService = new google.maps.DirectionsService();
    
    // Create a map and center it on Manhattan.
    var myOptions = {
        zoom: 18,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scrollwheel: false
    }
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

    address = 'Canary Wharf, London'
    geocoder = new google.maps.Geocoder();
	geocoder.geocode( { 'address': address}, function(results, status) {
       map.setCenter(CenterLatLng);
	});
    
    // Create a renderer for directions and bind it to the map.
    var rendererOptions = {
      map: map
    }

    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
    
    // Instantiate an info window to hold step text.
    stepDisplay = new google.maps.InfoWindow();

    polyline = new google.maps.Polyline({
	path: [],
	strokeColor: '#FF0000',
	strokeWeight: 3
    });
    poly2 = new google.maps.Polyline({
    	path: [],
        strokeColor: '#FF0000',
        strokeWeight: 3
    });

    tunnelShape.setMap(map);
  }

  
  
	var steps = []

function calcRoute(){
    if (timerHandle) { clearTimeout(timerHandle); }
    if (marker) { marker.setMap(null);}
    polyline.setMap(null);
    poly2.setMap(null);

    directionsDisplay.setMap(null);
    polyline = new google.maps.Polyline({
        path: [],
        strokeColor: '#FF0000',
        strokeWeight: 1
    });
    poly2 = new google.maps.Polyline({
        path: [],
        strokeColor: '#FF0000',
        strokeWeight: 2
    });

    // Create a renderer for directions and bind it to the map.
    var rendererOptions = {
        map: map
    }

    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

    var travelMode = google.maps.DirectionsTravelMode.DRIVING

    var request = {
        origin: StartLatLng,
        destination: EndLatLng,
        travelMode: travelMode
    };

    // Route the directions and pass the response to a
    // function to create markers for each step.
    directionsService.route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK){
            directionsDisplay.setDirections(response);
            var bounds = new google.maps.LatLngBounds();
            var route = response.routes[0];
            startLocation = new Object();
            endLocation = new Object();

            // For each route, display summary information.
        	var path = response.routes[0].overview_path;
            var legs = response.routes[0].legs;
            for (i=0;i<legs.length;i++) {
                if (i == 0) { 
                    startLocation.latlng = legs[i].start_location;
                    startLocation.address = legs[i].start_address;
                    // marker = google.maps.Marker({map:map,position: startLocation.latlng});
                    marker = createMarker(legs[i].start_location,"Vehicle #001","Example Vehicle","green");
                }
                endLocation.latlng = legs[i].end_location;
                endLocation.address = legs[i].end_address;
                var steps = legs[i].steps;
                for (j=0;j<steps.length;j++) {
                    var nextSegment = steps[j].path;
                    for (k=0;k<nextSegment.length;k++) {
                        polyline.getPath().push(nextSegment[k]);
                        bounds.extend(nextSegment[k]);
                    }
                }
            }

            polyline.setMap(map);
            map.fitBounds(bounds);
            map.setZoom(18);
            startAnimation();
        }                                                    
    });
}
  

  
var step = 1; // 5; // metres
var tick = 50; // milliseconds
var eol;
var k=0;
var stepnum=0;
var speed = "";
var lastVertex = 1;


//=============== animation functions ======================
      function updatePoly(d) {
        // Spawn a new polyline every 20 vertices, because updating a 100-vertex poly is too slow
        if (poly2.getPath().getLength() > 20) {
          poly2=new google.maps.Polyline([polyline.getPath().getAt(lastVertex-1)]);
          // map.addOverlay(poly2)
        }

        if (polyline.GetIndexAtDistance(d) < lastVertex+2) {
           if (poly2.getPath().getLength()>1) {
             poly2.getPath().removeAt(poly2.getPath().getLength()-1)
           }
           poly2.getPath().insertAt(poly2.getPath().getLength(),polyline.GetPointAtDistance(d));
        } else {
          poly2.getPath().insertAt(poly2.getPath().getLength(),endLocation.latlng);
        }
      }


      function animate(d) {
        //console.log("animate("+d+")");
        if (d>eol) {
          map.panTo(endLocation.latlng);
          marker.setPosition(endLocation.latlng);
          return;
        } else if (d==600) {
            switchDevices('ON');
            tunnelShape.setOptions({strokeColor: '#009900', fillColor: '#009900'});
        } else if (d==800) {
            switchDevices('OFF');
            tunnelShape.setOptions({strokeColor: '#FF0000', fillColor: '#FF0000'});
        }
        var p = polyline.GetPointAtDistance(d);
        map.panTo(p);
        marker.setPosition(p);
        updatePoly(d);
        timerHandle = setTimeout("animate("+(d+step)+")", tick);
      }


function startAnimation() {
    eol=polyline.Distance();
    map.setCenter(polyline.getPath().getAt(0));
    // map.addOverlay(new google.maps.Marker(polyline.getAt(0),G_START_ICON));
    // map.addOverlay(new GMarker(polyline.getVertex(polyline.getVertexCount()-1),G_END_ICON));
    // marker = new google.maps.Marker({location:polyline.getPath().getAt(0)} /* ,{icon:car} */);
    // map.addOverlay(marker);
    poly2 = new google.maps.Polyline({path: [polyline.getPath().getAt(0)], strokeColor:"#0000FF", strokeWeight:10});
    // map.addOverlay(poly2);
    setTimeout("animate(50)",2000);  // Allow time for the initial map display
}


//=============== ~animation funcitons =====================

    var logme = 1;

    var serialNumber = "01-001-ABC123";
    var token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3dhdHR6by5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0LyIsImF1ZCI6Imh0dHBzOi8vdGVzdGluZy53YXR0em8uY29tLyIsIm5iZiI6MTQxNTg5MTMyMiwiZXhwIjoyNTM0MDIzMDA3OTksImVtYWlsIjoiam9ubnkucC5jb29rQDhwb2ludDNsZWQuY28udWsiLCJ1bmlxdWVfbmFtZSI6Ikpvbm55IENvb2siLCJuYW1laWQiOiIxZGNiYzE4YjczNTU0OWE1ODdhMjRjNzNiZjYwNjFkMSIsImlkZW50aXR5cHJvdmlkZXIiOiJXYXR0em8ifQ.RKkiJ-xIdrUbbN382iIaXn8BiK14x3XA9XDAYk0i3lo';
    var serviceUri = 'https://testing.wattzo.com/api/realtime';

    // we use an inline data source in the example, usually data would
    // be fetched from a server
    
    function CallRestAPI(method, endPoint, param, token)
    {
        var weblink = "https://testing.wattzo.com/api/"+endPoint;
        
        $.ajax(
        {
            url : weblink,
            type : method,
            data: param,
            dataType: 'json',
            beforeSend: function (request)
            {
                if ((token!=undefined) && (token!=null)) {
                    request.setRequestHeader("Authorization", "Bearer "+token);
                }
            },
            crossDomain: true,
            success : function(result, textStatus, request)
            {
                //process the result
                //console.log(result);
                //console.log(textStatus);
                //console.log(request.status);
                /*for (i in result.data) {
                    //console.log(result.data[i].id);
                }/**/
            },
            error : function(jqXHR, textStatus, errorThrown) {
                alert('Error: '+jqXHR.status);
                alert('ErrorThrown: '+errorThrown)
            }
        });
    }

    var devices = [
        '01-166-56bc89',
        '01-166-0b9275',
        '01-166-258ce3'
    ];

    function switchDevices(state) {
        for (var i in devices) {
            CallRestAPI(
                'PUT',
                'hubs/'+serialNumber+'/devices/'+devices[i]+'/status',
                'status='+state,
                token
            );/**/
        }
    }

    $(function() {
        initialize();
    });
JS;
$this->inlineScript()->captureEnd();

?>

<div class="row-fluid">
    <div class="span12">
         <!-- BEGIN NOTIFICATIONS PORTLET-->
        <div class="widget blue">
            <div class="widget-title">
                <h4><i class="icon-map-marker"></i> Route Mapping Demo</h4>
                <span class="tools">
                    <a href="javascript:;" class="icon-chevron-down"></a>
                    <a href="javascript:;" class="icon-remove"></a>
                </span>
            </div>
            <div class="widget-body">
                <div id="tools">
                    Route Start: <span style="margin-right: 20px" class="label label-important">South Colonnade, canary Wharf</span>
                    Route End: <span class="label label-info">Upper Bank Street, Canary Wharf</span>
                    <button class="btn btn-primary pull-right" onclick="calcRoute();">Run Route <i class="icon-play-sign"></i></button>
                </div>
                <div class="space10"></div>
                <div id="map_canvas" style="width:100%;height:800px; border: 1px #f00 solid"></div>
            </div>
        </div>
         <!-- END NOTIFICATIONS PORTLET-->
    </div>
</div>

