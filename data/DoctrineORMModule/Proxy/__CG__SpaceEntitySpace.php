<?php

namespace DoctrineORMModule\Proxy\__CG__\Space\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Space extends \Space\Entity\Space implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'name', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'notes', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'floor', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimx', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimy', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimh', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'root', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'deleted', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'created', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'project', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'building', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'spaceId', 'inputFilter');
        }

        return array('__isInitialized__', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'name', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'notes', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'floor', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimx', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimy', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'dimh', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'root', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'deleted', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'created', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'project', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'building', '' . "\0" . 'Space\\Entity\\Space' . "\0" . 'spaceId', 'inputFilter');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Space $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getFloor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFloor', array());

        return parent::getFloor();
    }

    /**
     * {@inheritDoc}
     */
    public function getDimx()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimx', array());

        return parent::getDimx();
    }

    /**
     * {@inheritDoc}
     */
    public function getDimy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimy', array());

        return parent::getDimy();
    }

    /**
     * {@inheritDoc}
     */
    public function getDimh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimh', array());

        return parent::getDimh();
    }

    /**
     * {@inheritDoc}
     */
    public function setFloor($floor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFloor', array($floor));

        return parent::setFloor($floor);
    }

    /**
     * {@inheritDoc}
     */
    public function setDimx($dimx)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDimx', array($dimx));

        return parent::setDimx($dimx);
    }

    /**
     * {@inheritDoc}
     */
    public function setDimy($dimy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDimy', array($dimy));

        return parent::setDimy($dimy);
    }

    /**
     * {@inheritDoc}
     */
    public function setDimh($dimh)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDimh', array($dimh));

        return parent::setDimh($dimh);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', array());

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoot', array());

        return parent::getRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getProject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProject', array());

        return parent::getProject();
    }

    /**
     * {@inheritDoc}
     */
    public function getBuilding()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBuilding', array());

        return parent::getBuilding();
    }

    /**
     * {@inheritDoc}
     */
    public function getSpaceId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getSpaceId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpaceId', array());

        return parent::getSpaceId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', array($notes));

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function setRoot($root)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoot', array($root));

        return parent::setRoot($root);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTime $created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function setProject($project)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProject', array($project));

        return parent::setProject($project);
    }

    /**
     * {@inheritDoc}
     */
    public function setBuilding($building)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBuilding', array($building));

        return parent::setBuilding($building);
    }

    /**
     * {@inheritDoc}
     */
    public function setSpaceId($spaceId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpaceId', array($spaceId));

        return parent::setSpaceId($spaceId);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleted', array());

        return parent::getDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', array($deleted));

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function populate($data = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'populate', array($data));

        return parent::populate($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', array());

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function setInputFilter(\Zend\InputFilter\InputFilterInterface $inputFilter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInputFilter', array($inputFilter));

        return parent::setInputFilter($inputFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function getInputFilter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInputFilter', array());

        return parent::getInputFilter();
    }

}
